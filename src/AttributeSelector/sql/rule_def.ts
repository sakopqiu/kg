export function getRuleDef(lng: 'en' | 'zh') {

    const isZh = lng === 'zh';

    return {
        supportTypes: [
            'smallint',
            'bigint',
            'int',
            'float',
            'double',
            'string',
            'date',
            'timestamp',
            'boolean',
            'binary',
            'tinyint',
        ],
        controlTypes: [
            {
                name: 'value',
                translation: isZh ? '值' : 'value',
                includes: [
                    'smallint',
                    'bigint',
                    'int',
                    'float',
                    'double',
                    'string',
                    'date',
                    'timestamp',
                    'boolean',
                    'binary',
                    'tinyint',
                ],
                inferType: 'self',
            },
            {
                name: 'length',
                translation: isZh ? '长度' : 'length',
                includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'bin',
                translation: isZh ? '二进制' : 'bin',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'string',
            },
            {
                name: 'cos',
                translation: 'cos',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'log',
                translation: 'log',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'ln',
                translation: 'ln',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'log2',
                translation: 'log2',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'sin',
                translation: 'sin',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'year',
                translation: isZh ? '取年' : 'year',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'month',
                translation: isZh ? '取月' : 'month',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'dayOfMonth',
                translation: isZh ? '一个月的第几天' : 'dayOfMonth',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'dayOfWeek',
                translation: isZh ? '一个月的第几周' : 'dayOfWeek',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'dayOfYear',
                translation: isZh ? '一年的第几天' : 'dayOfYear',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'hour',
                translation: isZh ? '时' : 'hour',
                includes: ['timestamp'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'minute',
                translation: isZh ? '分' : 'minute',
                includes: ['timestamp'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'weekOfYear',
                translation: isZh ? '一年的第几周' : 'weekOfYear',
                includes: ['timestamp', 'date'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'sqrt',
                translation: isZh ? '平方' : 'sqrt',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'cbrt',
                translation: isZh ? '立方根' : 'cbrt',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'abs',
                translation: isZh ? '绝对值' : 'abs',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'ceil',
                translation: isZh ? '向上取值' : 'ceil',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
            {
                name: 'cosh',
                translation: 'cosh',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'exp',
                translation: 'exp',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'double',
            },
            {
                name: 'floor',
                translation: isZh ? '向下取值' : 'floor',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                onlyInComplexMode: true, // 如果store是isSimple，就不显示这个属性
                inferType: 'int',
            },
        ],
        functionTypes: [
            {
                name: 'max',
                translation: 'max',
                includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
                group: 'math',
                desc: 'get max value of a column',
                isUDF: false,
            },
            {
                name: 'min',
                translation: 'min',
                includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
                group: 'math',
                desc: 'get min value of a column',
                isUDF: false,
            },
            {
                name: 'avg',
                translation: 'avg',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get avg value of a column',
                isUDF: false,
            },
            {
                name: 'count',
                translation: 'count',
                includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
                group: 'math',
                desc: 'get the count of a column',
                isUDF: false,
            },
            {
                name: 'first',
                translation: 'first',
                includes: [
                    'smallint',
                    'bigint',
                    'int',
                    'float',
                    'double',
                    'string',
                    'date',
                    'timestamp',
                    'boolean',
                    'binary',
                    'tinyint',
                ],
                group: 'math',
                desc: 'get the first of a column',
                isUDF: false,
            },
            {
                name: 'mean',
                translation: 'mean',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the mean of a column',
                isUDF: false,
            },
            {
                name: 'sum',
                translation: 'sum',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the sum of a column',
                isUDF: false,
            },
            {
                name: 'sumDistinct',
                translation: 'sumDistinct',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the distinct sum of a column',
                isUDF: false,
            },
            {
                name: 'variance',
                translation: 'variance',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the variance',
                isUDF: false,
            },
            {
                name: 'var_samp',
                translation: 'var_samp',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the sample variance',
                isUDF: false,
            },
            {
                name: 'abs',
                translation: 'abs',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the abs',
                isUDF: false,
            },
            {
                name: 'negate',
                translation: 'negate',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the negate of a value',
                isUDF: false,
            },
            {
                name: 'not',
                translation: 'not',
                includes: ['boolean'],
                group: 'math',
                desc: 'get the not of a boolean',
                isUDF: false,
            },
            {
                name: 'sqrt',
                translation: 'sqrt',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the sqrt',
                isUDF: false,
            },
            {
                name: 'cbrt',
                translation: 'cbrt',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the cbrt',
                isUDF: false,
            },
            {
                name: 'floor',
                translation: 'floor',
                includes: ['smallint', 'bigint', 'int', 'float', 'double'],
                group: 'math',
                desc: 'get the floor of a value',
                isUDF: false,
            },
            {
                name: 'column',
                translation: 'column',
                includes: [
                    'smallint',
                    'bigint',
                    'int',
                    'float',
                    'double',
                    'string',
                    'date',
                    'timestamp',
                    'boolean',
                    'binary',
                    'tinyint',
                ],
                group: 'self',
                desc: 'get the current column',
                isUDF: false,
            },
        ],
        conditionTypes: [
            {
                name: 'contains',
                translation: isZh ? '包含' : 'contains',
                onlyInComplexMode: true,
                includes: ['string'],
            },
            {
                name: 'not_contain',
                translation: isZh ? '不包含' : 'not contains',
                onlyInComplexMode: true,
                includes: ['string'],
            },
            {
                name: 'equals',
                translation: '=',
                includes: [
                    'smallint',
                    'bigint',
                    'int',
                    'float',
                    'double',
                    'string',
                    'date',
                    'timestamp',
                    'boolean',
                    'binary',
                    'tinyint',
                ],
            },
            {
                name: 'not_equal',
                translation: '!=',
                includes: [
                    'smallint',
                    'bigint',
                    'int',
                    'float',
                    'double',
                    'string',
                    'date',
                    'timestamp',
                    'boolean',
                    'binary',
                    'tinyint',
                ],
            },
            {
                name: 'greater_or_equal',
                translation: '>=',
                includes: ['string', 'smallint', 'bigint', 'int', 'float', 'double', 'date', 'timestamp'],
                // includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
            },
            {
                name: 'lower_or_equal',
                translation: '<=',
                includes: ['string', 'smallint', 'bigint', 'int', 'float', 'double', 'date', 'timestamp'],
                // includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
            },
            {
                name: 'lower',
                translation: '<',
                includes: ['string', 'smallint', 'bigint', 'int', 'float', 'double', 'date', 'timestamp'],
                // includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
            },
            {
                name: 'greater',
                translation: '>',
                includes: ['string', 'smallint', 'bigint', 'int', 'float', 'double', 'date', 'timestamp'],
                // includes: ['smallint', 'bigint', 'int', 'float', 'double', 'string', 'date', 'timestamp'],
            },
            {
                name: 'like',
                translation: 'like',
                onlyInComplexMode: true,
                includes: ['string'],
            },
            // {
            //   name: 'is_null',
            //   translation: 'is null',
            //   includes: [
            //     'smallint',
            //     'bigint',
            //     'int',
            //     'float',
            //     'double',
            //     'string',
            //     'date',
            //     'timestamp',
            //     'boolean',
            //     'binary',
            //     'tinyint',
            //   ],
            // },
            // {
            //   name: 'not_null',
            //   translation: 'not null',
            //   includes: [
            //     'smallint',
            //     'bigint',
            //     'int',
            //     'float',
            //     'double',
            //     'string',
            //     'date',
            //     'timestamp',
            //     'boolean',
            //     'binary',
            //     'tinyint',
            //   ],
            // },
        ],
    };
}
